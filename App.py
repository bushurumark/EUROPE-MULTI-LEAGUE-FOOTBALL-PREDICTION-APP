# -*- coding: utf-8 -*-
"""App1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QFc_EGcY6N208mh4Qu2hgM-_3S7qa6Cf
"""

#pip install streamlit

import streamlit as st
import pandas as pd
import joblib
import gdown

# Download the model from Google Drive and cache it to avoid re-downloading
@st.cache_data
def download_model():
    url = 'https://drive.google.com/uc?id=1uchT3FyZuGOBv9LTbxbm9gTynoWZ8HGk'
    output = 'model.pkl'
    gdown.download(url, output, quiet=False)
    return joblib.load(output)

# Load data from Google Drive and cache it
@st.cache_data
def load_data():
    url = 'https://drive.google.com/uc?id=1KTBInSLqNxHVGXljCqZv9Tks-3dHqiUI'
    output = 'football_data.csv'
    gdown.download(url, output, quiet=False)
    return pd.read_csv(output)

# Load model and data
model = download_model()
data = load_data()

# Function to compute the mean of head-to-head stats for the selected teams
def compute_mean_for_teams(home_team, away_team):
    h2h_data = data[(data['HomeTeam'] == home_team) & (data['AwayTeam'] == away_team)]
    if h2h_data.empty:
        st.error(f"No historical data available with {home_team} as the home team and {away_team} as the away team.")
        return None

    h2h_data = h2h_data.drop(columns=['FTR', 'Date', 'HomeTeam', 'AwayTeam'], errors='ignore')
    h2h_data['HTR'] = h2h_data['HTR'].replace({'H': 1, 'D': 2, 'A': 3})
    mean_data = h2h_data.mean(numeric_only=True)

    if 'HTR' in mean_data:
        if 0 <= mean_data['HTR'] <= 1.4:
            mean_data['HTR'] = 'H'
        elif 1.5 <= mean_data['HTR'] <= 2.4:
            mean_data['HTR'] = 'D'
        elif 2.5 <= mean_data['HTR'] <= 3.4:
            mean_data['HTR'] = 'A'

    input_data = pd.DataFrame([mean_data])
    model_features = model.feature_names_in_
    for feature in model_features:
        if feature not in input_data.columns:
            input_data[feature] = 0
    input_data = input_data[model_features]

    return input_data

# Prediction function with probabilities
def predict_with_h2h_data(home_team, away_team):
    input_data = compute_mean_for_teams(home_team, away_team)
    if input_data is None:
        return

    prediction = model.predict(input_data)[0]
    probabilities = model.predict_proba(input_data)[0]  # Get probabilities for each class

    # Map the prediction probabilities to result categories
    results = ['Home Team Win', 'Draw', 'Away Team Win']
    probabilities_dict = {results[i]: probabilities[i] * 100 for i in range(len(probabilities))}

    # Display the prediction and probabilities
    if 0.5 <= prediction <= 1.4:
        st.markdown('<div class="prediction-result">üèÜ Prediction: Home Team Win</div>', unsafe_allow_html=True)
    elif 1.5 <= prediction <= 2.4:
        st.markdown('<div class="prediction-result">ü§ù Prediction: Draw</div>', unsafe_allow_html=True)
    elif 2.5 <= prediction <= 3.4:
        st.markdown('<div class="prediction-result">‚öΩ Prediction: Away Team Win</div>', unsafe_allow_html=True)
    else:
        st.markdown('<div class="prediction-result">‚ùó Prediction: Invalid prediction value</div>', unsafe_allow_html=True)

    # Display probabilities in a nice format
    st.markdown('<div style="font-size: 20px; color: #FF4500; font-weight: bold; text-align: center;">Prediction Probabilities:</div>', unsafe_allow_html=True)
    for result, prob in probabilities_dict.items():
        st.markdown(f'<div style="font-size: 18px; text-align: center;">{result}: {prob:.2f}%</div>', unsafe_allow_html=True)

# CSS Styling with red labels
st.markdown("""
    <style>
    /* Set the app background to blue */
    .stApp {
        background-color: #0000FF;
    }
    /* Title styling */
    .title {
        color: #32CD32;
        text-align: center;
        font-size: 40px;
    }
    /* Dropdown label styling */
    label {
        color: red !important; /* Red color for labels */
        font-weight: bold;
    }
    /* Dropdown styling */
    .stSelectbox {
        color: #00008B;
        background-color: #ADD8E6;
        border-radius: 10px;
        border: 2px solid #32CD32;
    }
    /* Button styling */
    .stButton button {
        background-color: #FFD700;
        color: black;
        font-size: 20px;
        border-radius: 10px;
        padding: 10px 20px;
    }
    /* Prediction result styling */
    .prediction-result {
        color: #FF4500;
        font-size: 30px;
        text-align: center;
        font-weight: bold;
    }
    </style>
    """, unsafe_allow_html=True)

# Main app function
def main():
    st.markdown('<div class="title">MULTI-LEAGUE FOOTBALL PREDICTION APP</div>', unsafe_allow_html=True)

    leagues = {
        "Premier League": sorted(['Arsenal', 'Aston Villa', 'Bournemouth', 'Brentford', 'Brighton', 'Chelsea', 'Crystal Palace',
                                  'Everton', 'Fulham', 'Ipswich', 'Leicester', 'Liverpool', 'Man City', 'Man United', 'Newcastle',
                                  "Nott'm Forest", 'Southampton', 'Tottenham', 'West Ham', 'Wolves']),
        "English Championship" : sorted(['Blackburn', 'Derby', 'Preston', 'Sheffield United', 'Cardiff', 'Sunderland','Hull',
                                         'Bristol City', 'Leeds', 'Portsmouth', 'Middlesbrough', 'Swansea','Millwall', 'Watford',
                                         'Oxford', 'Norwich', 'QPR', 'West Brom', 'Stoke','Coventry', 'Sheffield Weds', 'Plymouth',
                                         'Luton', 'Burnley']),
        "Serie A": sorted(['Atalanta', 'Bologna', 'Cagliari', 'Como', 'Empoli', 'Fiorentina', 'Genoa', 'Inter',
                           'Juventus', 'Lazio', 'Lecce', 'Milan', 'Monza', 'Napoli', 'Parma', 'Roma', 'Torino',
                           'Udinese', 'Venezia', 'Verona']),
        "Ligue1": sorted(['Angers', 'Auxerre', 'Brest', 'Lens', 'Le Havre', 'Lille', 'Lyon', 'Marseille',
                          'Monaco', 'Montpellier', 'Nantes', 'Nice', 'Paris SG', 'Reims', 'Rennes',
                          'St Etienne', 'Strasbourg', 'Toulouse']),
        "La Liga": sorted(['Alaves', 'Ath Bilbao', 'Ath Madrid', 'Barcelona', 'Betis', 'Celta', 'Espanol', 'Getafe',
                           'Girona', 'Las Palmas', 'Leganes', 'Mallorca', 'Osasuna', 'Real Madrid', 'Sevilla', 'Sociedad',
                           'Valencia', 'Valladolid', 'Vallecano', 'Villarreal']),
        "Eredivisie": sorted(['Ajax', 'Almere City', 'AZ Alkmaar', 'Feyenoord', 'For Sittard', 'Go Ahead Eagles', 'Groningen',
                              'Heerenveen', 'Heracles', 'NAC Breda', 'Nijmegen', 'PSV Eindhoven', 'Sparta Rotterdam',
                              'Twente', 'Utrecht', 'Waalwijk', 'Willem II', 'Zwolle']),
        "Bundesliga": sorted(['Augsburg', 'Bayern Munich', 'Bochum', 'Dortmund', 'Ein Frankfurt', 'Freiburg',
                              'Heidenheim', 'Hoffenheim', 'Holstein Kiel', 'Leverkusen', 'M\'gladbach', 'Mainz', 'RB Leipzig',
                              'St Pauli', 'Stuttgart', 'Union Berlin', 'Werder Bremen', 'Wolfsburg']),
        "Scottish League": sorted(['Aberdeen', 'Celtic', 'Dundee', 'Dundee United', 'Hearts', 'Hibernian', 'Kilmarnock',
                                    'Motherwell', 'Rangers', 'Ross County', 'St Johnstone', 'St Mirren']),
        "Belgium League": sorted(['Anderlecht', 'Antwerp', 'Beerschot VA', 'Cercle Brugge', 'Charleroi', 'Club Brugge',
                                  'Dender', 'Genk', 'Gent', 'Kortrijk', 'Mechelen', 'Oud-Heverlee Leuven', 'St Truiden',
                                  'St. Gilloise', 'Standard', 'Westerlo']),
        "Portuguese League": sorted(['Arouca', 'AVS', 'Benfica', 'Boavista', 'Casa Pia', 'Estoril', 'Estrela',
                                     'Famalicao', 'Farense', 'Gil Vicente', 'Guimaraes', 'Moreirense', 'Nacional',
                                     'Porto', 'Rio Ave', 'Santa Clara', 'Sp Braga', 'Sp Lisbon']),
        "Turkish League": sorted(['Ad. Demirspor', 'Alanyaspor', 'Antalyaspor', 'Besiktas', 'Bodrumspor', 'Buyuksehyr',
                                  'Eyupspor', 'Fenerbahce', 'Galatasaray', 'Gaziantep', 'Goztep', 'Hatayspor',
                                  'Kasimpasa', 'Kayserispor', 'Konyaspor', 'Rizespor', 'Samsunspor', 'Sivasspor',
                                  'Trabzonspor']),
        "Greece League": sorted(['AEK', 'Asteras Tripolis', 'Athens Kallithea', 'Atromitos', 'Lamia', 'Levadeiakos',
                                 'OFI Crete', 'Olympiakos', 'PAOK', 'Panathinaikos', 'Panetolikos',
                                 'Panserraikos', 'Volos NFC', 'Aris'])
    }

    # User selects the league, home team, and away team
    league_choice = st.selectbox("Select League", options=list(leagues.keys()))
    teams = leagues[league_choice]
    home_team = st.selectbox('Home Team', teams)
    away_team = st.selectbox('Away Team', [team for team in teams if team != home_team])

    # Button to perform auto-prediction using H2H data
    if st.button('Auto-Predict with H2H Mean Data'):
        predict_with_h2h_data(home_team, away_team)

if __name__ == '__main__':
    main()