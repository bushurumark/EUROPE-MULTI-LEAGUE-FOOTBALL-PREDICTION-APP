# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gqTnfawgZKqEEAdqdyi9wV_mAxXaZwoe
"""

# pip install streamlit

import streamlit as st
import pandas as pd
import joblib
import gdown

# Download the model from Google Drive and cache it to avoid re-downloading
@st.cache_data
def download_model():
    url = 'https://drive.google.com/uc?id=1uchT3FyZuGOBv9LTbxbm9gTynoWZ8HGk'
    output = 'model.pkl'
    gdown.download(url, output, quiet=False)
    return joblib.load(output)

# Load the trained model
model = download_model()

# Define function to preprocess input data
def preprocess_input(HomeTeam, AwayTeam, FTHG, FTAG, HTHG, HTAG, HTR, HS,
                     AS, HST, AST, HF, AF, HC, AC, HY, AY, HR, AR, B365H, B365D, B365A):
    input_data = pd.DataFrame({
        'HomeTeam': [HomeTeam],
        'AwayTeam': [AwayTeam],
        'FTHG': [FTHG],
        'FTAG': [FTAG],
        'HTHG': [HTHG],
        'HTAG': [HTAG],
        'HTR': [HTR],
        'HS': [HS],
        'AS': [AS],
        'HST': [HST],
        'AST': [AST],
        'HF': [HF],
        'AF': [AF],
        'HC': [HC],
        'AC': [AC],
        'HY': [HY],
        'AY': [AY],
        'HR': [HR],
        'AR': [AR],
        'B365H': [B365H],
        'B365D': [B365D],
        'B365A': [B365A]
    })

    # Encoding categorical variables
    input_data_encoded = pd.get_dummies(input_data)
    model_features = model.feature_names_in_
    for feature in model_features:
        if feature not in input_data_encoded.columns:
            input_data_encoded[feature] = 0

    return input_data_encoded[model_features]

# CSS Styling
st.markdown("""
    <style>
    /* Set the app background to blue */
    .stApp {
        background-color: #0000FF;
    }
    /* Title styling */
    .title {
        color: green;
        text-align: center;
        font-size: 40px;
    }
    /* Label styling for input fields */
    label {
        color: red !important;
        font-weight: bold;
    }
    /* Dropdown and input box styling */
    .stSelectbox, .stNumberInput {
        color: black;
    }
    /* Button styling */
    .stButton button {
        background-color: red;
        color: white;
        font-size: 20px;
        border-radius: 10px;
        padding: 10px 20px;
    }
    /* Prediction result styling */
    .prediction-result {
        color: red;
        font-size: 30px;
        text-align: center;
        font-weight: bold;
    }
    </style>
    """, unsafe_allow_html=True)

# Main app function
def main():
    st.markdown('<div class="title">MULTI-LEAGUE FOOTBALL PREDICTION APP</div>', unsafe_allow_html=True)

    # Leagues and teams data
    leagues = {
        "Premier League": sorted(['Arsenal', 'Aston Villa', 'Bournemouth', 'Brentford', 'Brighton', 'Chelsea', 'Crystal Palace',
                                  'Everton', 'Fulham', 'Ipswich', 'Leicester', 'Liverpool', 'Man City', 'Man United', 'Newcastle',
                                  "Nott'm Forest", 'Southampton', 'Tottenham', 'West Ham', 'Wolves']),
        "Serie A": sorted(['Atalanta', 'Bologna', 'Cagliari', 'Como', 'Empoli', 'Fiorentina', 'Genoa', 'Inter',
                           'Juventus', 'Lazio', 'Lecce', 'Milan', 'Monza', 'Napoli', 'Parma', 'Roma', 'Torino',
                           'Udinese', 'Venezia', 'Verona']),
        "Ligue1": sorted(['Angers', 'Auxerre', 'Brest', 'Lens', 'Le Havre', 'Lille', 'Lyon', 'Marseille',
                          'Monaco', 'Montpellier', 'Nantes', 'Nice', 'Paris SG', 'Reims', 'Rennes',
                          'St Etienne', 'Strasbourg', 'Toulouse']),
        "La Liga": sorted(['Alaves', 'Ath Bilbao', 'Ath Madrid', 'Barcelona', 'Betis', 'Celta', 'Espanol', 'Getafe',
                           'Girona', 'Las Palmas', 'Leganes', 'Mallorca', 'Osasuna', 'Real Madrid', 'Sevilla', 'Sociedad',
                           'Valencia', 'Valladolid', 'Vallecano', 'Villarreal']),
        "Eredivisie": sorted(['Ajax', 'Almere City', 'AZ Alkmaar', 'Feyenoord', 'For Sittard', 'Go Ahead Eagles', 'Groningen',
                              'Heerenveen', 'Heracles', 'NAC Breda', 'Nijmegen', 'PSV Eindhoven', 'Sparta Rotterdam',
                              'Twente', 'Utrecht', 'Waalwijk', 'Willem II', 'Zwolle']),
        "Bundesliga": sorted(['Augsburg', 'Bayern Munich', 'Bochum', 'Dortmund', 'Ein Frankfurt', 'Freiburg',
                              'Heidenheim', 'Hoffenheim', 'Holstein Kiel', 'Leverkusen', 'M\'gladbach', 'Mainz', 'RB Leipzig',
                              'St Pauli', 'Stuttgart', 'Union Berlin', 'Werder Bremen', 'Wolfsburg']),
        "Scottish League": sorted(['Aberdeen', 'Celtic', 'Dundee', 'Dundee United', 'Hearts', 'Hibernian', 'Kilmarnock',
                                    'Motherwell', 'Rangers', 'Ross County', 'St Johnstone', 'St Mirren']),
        "Belgium League": sorted(['Anderlecht', 'Antwerp', 'Beerschot VA', 'Cercle Brugge', 'Charleroi', 'Club Brugge',
                                  'Dender', 'Genk', 'Gent', 'Kortrijk', 'Mechelen', 'Oud-Heverlee Leuven', 'St Truiden',
                                  'St. Gilloise', 'Standard', 'Westerlo']),
        "Portuguese League": sorted(['Arouca', 'AVS', 'Benfica', 'Boavista', 'Casa Pia', 'Estoril', 'Estrela',
                                     'Famalicao', 'Farense', 'Gil Vicente', 'Guimaraes', 'Moreirense', 'Nacional',
                                     'Porto', 'Rio Ave', 'Santa Clara', 'Sp Braga', 'Sp Lisbon']),
        "Turkish League": sorted(['Ad. Demirspor', 'Alanyaspor', 'Antalyaspor', 'Besiktas', 'Bodrumspor', 'Buyuksehyr',
                                  'Eyupspor', 'Fenerbahce', 'Galatasaray', 'Gaziantep', 'Goztep', 'Hatayspor',
                                  'Kasimpasa', 'Kayserispor', 'Konyaspor', 'Rizespor', 'Samsunspor', 'Sivasspor',
                                  'Trabzonspor']),
        "Greece League": sorted(['AEK', 'Asteras Tripolis', 'Athens Kallithea', 'Atromitos', 'Lamia', 'Levadeiakos',
                                 'OFI Crete', 'Olympiakos', 'PAOK', 'Panathinaikos', 'Panetolikos',
                                 'Panserraikos', 'Volos NFC', 'Aris'])
    }

    league_choice = st.selectbox("Select League", options=list(leagues.keys()))
    teams = leagues[league_choice]

    # Select home and away teams
    HomeTeam = st.selectbox('Home Team', teams)
    AwayTeam = st.selectbox('Away Team', [team for team in teams if team != HomeTeam], help="Select a different team as Away Team")

    # Match statistics inputs with streamlined formatting
    FTHG = st.number_input('FULL TIME HOME TEAM SCORE', min_value=0.0, max_value=15.0, step=0.1, format="%.2f")
    FTAG = st.number_input('FULL TIME AWAY TEAM SCORE', min_value=0.0, max_value=15.0, step=0.1, format="%.2f")
    HTHG = st.number_input('HALF TIME HOME TEAM SCORE', min_value=0.0, max_value=15.0, step=0.1, format="%.2f")
    HTAG = st.number_input('HALF TIME AWAY TEAM SCORE', min_value=0.0, max_value=15.0, step=0.1, format="%.2f")
    HTR = st.selectbox('HALF TIME RESULTS', ['H', 'D', 'A'], help="H for Home Win, D for Draw, A for Away Win")
    HS = st.number_input('HOME TEAM TOTAL SHOTS', min_value=0.0, max_value=35.0, step=0.1, format="%.2f")
    AS = st.number_input('AWAY TEAM TOTAL SHOTS', min_value=0.0, max_value=35.0, step=0.1, format="%.2f")
    HST = st.number_input('HOME TEAM SHOTS ON TARGET', min_value=0.0, max_value=35.0, step=0.1, format="%.2f")
    AST = st.number_input('AWAY TEAM SHOTS ON TARGET', min_value=0.0, max_value=35.0, step=0.1, format="%.2f")
    HF = st.number_input('HOME TEAM FOULS', min_value=0.0, max_value=35.0, step=0.1, format="%.2f")
    AF = st.number_input('AWAY TEAM FOULS', min_value=0.0, max_value=35.0, step=0.1, format="%.2f")
    HC = st.number_input('HOME TEAM CORNERS', min_value=0.0, max_value=35.0, step=0.1, format="%.2f")
    AC = st.number_input('AWAY TEAM CORNERS', min_value=0.0, max_value=35.0, step=0.1, format="%.2f")
    HY = st.number_input('HOME TEAM YELLOW CARDS', min_value=0.0, max_value=25.0, step=0.1, format="%.2f")
    AY = st.number_input('AWAY TEAM YELLOW CARDS', min_value=0.0, max_value=25.0, step=0.1, format="%.2f")
    HR = st.number_input('HOME TEAM RED CARDS', min_value=0.0, max_value=25.0, step=0.1, format="%.2f")
    AR = st.number_input('AWAY TEAM RED CARDS', min_value=0.0, max_value=25.0, step=0.1, format="%.2f")
    B365H = st.number_input('HOME TEAM BETTING ODDS', min_value=0.0, max_value=40.0, step=0.1, format="%.2f")
    B365D = st.number_input('DRAW BETTING ODDS', min_value=0.0, max_value=40.0, step=0.1, format="%.2f")
    B365A = st.number_input('AWAY TEAM BETTING ODDS', min_value=0.0, max_value=40.0, step=0.1, format="%.2f")

    # Prediction logic
    if st.button('Predict'):
        input_data = preprocess_input(HomeTeam, AwayTeam, FTHG, FTAG, HTHG, HTAG, HTR, HS, AS, HST, AST, HF, AF, HC, AC, HY, AY, HR, AR, B365H, B365D, B365A)
        try:
            prediction = model.predict(input_data)[0]
            if 0.5 <= prediction <= 1.4:
                st.markdown('<div class="prediction-result">üèÜ Prediction: Home Team Win</div>', unsafe_allow_html=True)
            elif 1.5 <= prediction <= 2.4:
                st.markdown('<div class="prediction-result">ü§ù Prediction: Draw</div>', unsafe_allow_html=True)
            elif 2.5 <= prediction <= 3.4:
                st.markdown('<div class="prediction-result">‚öΩ Prediction: Away Team Win</div>', unsafe_allow_html=True)
            else:
                st.markdown('<div class="prediction-result">‚ùó Prediction: Invalid prediction value</div>', unsafe_allow_html=True)
        except Exception as e:
            st.error(f"An error occurred: {e}")

if __name__ == '__main__':
    main()