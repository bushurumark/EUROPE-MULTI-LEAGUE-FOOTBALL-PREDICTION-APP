# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rdepxh4wtVMwXqF3UFV7KCgDPFibqWpk
"""

#!pip install streamlit

# main.py

import streamlit as st
import plotly.express as px
from typing import Optional, Dict, Tuple
from backend import (
    download_and_load_models,
    load_data,
    compute_mean_for_teams_v1,
    compute_mean_for_teams_v2,
    calculate_probabilities_v1,
    calculate_probabilities_v2,
    determine_final_prediction,
)
from leagues import leagues

# --- Constants ---
NO_DATA_MSG = "No historical data available."
PREDICTION_TITLE = "🏆 Final Prediction: {}"

# --- Streamlit Config ---
st.set_page_config(page_title="Football Predictor", layout="centered")

# --- CSS Styling ---
def load_css() -> None:
    """Load custom CSS styles from GitHub."""
    css_url = "https://raw.githubusercontent.com/bushurumark/EUROPE-MULTI-LEAGUE-FOOTBALL-PREDICTION-APP/main/style.css"
    st.markdown(
        f'<link rel="stylesheet" href="{css_url}">',
        unsafe_allow_html=True
    )

load_css()  # Call this function to apply styles

# --- Cached Resources ---
@st.cache_resource(ttl=3600)  # Cache for 1 hour
def load_models_and_data() -> Tuple:
    """Load models and data with caching."""
    with st.spinner("Loading models and data..."):
        model1, model2 = download_and_load_models()
        data1, data2 = load_data()
    return model1, model2, data1, data2

# --- App Title ---
st.markdown('<div class="title">FOOTBALL PREDICTION APP</div>', unsafe_allow_html=True)

# --- Sidebar Filters ---
def render_sidebar_filters() -> Tuple[str, str, str, str]:
    """Render league/team selection in the sidebar."""
    with st.sidebar:
        st.header("Filters")
        category = st.selectbox("Select Category", list(leagues.keys()))
        league = st.selectbox("Select a League", list(leagues[category].keys()))
        teams = leagues[category][league]
        home_team = st.selectbox("Select Home Team", teams, index=0)
        away_team = st.selectbox("Select Away Team", teams, index=1 if len(teams) > 1 else 0)
    return category, league, home_team, away_team

# --- Prediction Logic ---
def run_prediction(
    category: str,
    home_team: str,
    away_team: str,
    model1,
    model2,
    data1,
    data2,
) -> Tuple[Optional[float], Optional[Dict[str, float]]]:
    """Run prediction based on category."""
    if category == "Others":
        input_data = compute_mean_for_teams_v2(home_team, away_team, data2, model2)
        probs = calculate_probabilities_v2(home_team, away_team, data2)
        model = model2
    else:
        input_data = compute_mean_for_teams_v1(home_team, away_team, data1, model1)
        probs = calculate_probabilities_v1(home_team, away_team, data1)
        model = model1

    if input_data is None or probs is None:
        st.warning(NO_DATA_MSG)
        return None, None

    pred = model.predict(input_data)[0]
    return pred, probs

# --- Plotting ---
def plot_probabilities(probs: Dict[str, float]) -> None:
    """Plot outcome probabilities using Plotly."""
    colors = {
        "Home Team Win": "green",
        "Draw": "yellow",
        "Away Team Win": "red",
    }
    fig = px.bar(
        x=list(probs.keys()),
        y=list(probs.values()),
        labels={'x': 'Outcome', 'y': 'Probability (%)'},
        title="Match Outcome Probabilities",
        color=list(probs.keys()),
        color_discrete_map=colors,
    )
    st.plotly_chart(fig, use_container_width=True)

# --- Main App ---
def main() -> None:
    """Run the Streamlit app."""
    model1, model2, data1, data2 = load_models_and_data()
    category, league, home_team, away_team = render_sidebar_filters()

    if st.button("Predict Match Outcome", key="predict_button"):
        with st.spinner("Predicting..."):
            pred, probs = run_prediction(category, home_team, away_team, model1, model2, data1, data2)

        if pred is not None and probs is not None:
            final = determine_final_prediction(pred, probs)
            st.markdown(
                f'<div class="prediction-result">{PREDICTION_TITLE.format(final)}</div>',
                unsafe_allow_html=True,
            )
            plot_probabilities(probs)
            
            st.markdown("### Historical Probabilities:")
            for outcome, prob in probs.items():
                st.markdown(f"**{outcome}**: {prob:.2f}%")

if __name__ == "__main__":
    main()
