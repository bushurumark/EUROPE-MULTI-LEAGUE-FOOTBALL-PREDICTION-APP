# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rdepxh4wtVMwXqF3UFV7KCgDPFibqWpk
"""

#!pip install streamlit

import streamlit as st
import plotly.express as px
from backend import (
    download_models, load_data,
    compute_mean_for_teams_v1, compute_mean_for_teams_v2,
    calculate_probabilities_v1, calculate_probabilities_v2,
    determine_final_prediction
)
from leagues import leagues

st.set_page_config(page_title="Football Predictor", layout="centered")

# Load models and data
model1, model2 = download_models()
data1, data2 = load_data()

# Inline CSS
with open("style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

st.markdown('<div class="title">FOOTBALL PREDICTION APP</div>', unsafe_allow_html=True)

category = st.selectbox("Select Category", list(leagues.keys()))
league = st.selectbox("Select a League", list(leagues[category].keys()))
teams = leagues[category][league]
home_team = st.selectbox("Select Home Team", teams)
away_team = st.selectbox("Select Away Team", teams)

if st.button("Predict Match Outcome"):
    if home_team == away_team:
        st.warning("Home and Away teams must be different.")
    else:
        if category == "Others":
            input_data = compute_mean_for_teams_v2(home_team, away_team, data2, model2)
            probs = calculate_probabilities_v2(home_team, away_team, data2)
            h2h_df = data2[(data2["Home"] == home_team) & (data2["Away"] == away_team)]
            model = model2
        else:
            input_data = compute_mean_for_teams_v1(home_team, away_team, data1, model1)
            probs = calculate_probabilities_v1(home_team, away_team, data1)
            h2h_df = data1[(data1["HomeTeam"] == home_team) & (data1["AwayTeam"] == away_team)]
            model = model1

        if input_data is None or probs is None:
            st.warning("No historical data available for this fixture.")
        else:
            pred = model.predict(input_data)[0]
            final = determine_final_prediction(pred, probs)

            # üèÜ Final prediction
            st.markdown(f'<div class="prediction-result">üèÜ Final Prediction: {final}</div>', unsafe_allow_html=True)

            # üî¢ Model confidence using predict_proba (if available)
            if hasattr(model, "predict_proba"):
                conf_probs = model.predict_proba(input_data)[0]
                labels = model.classes_ if hasattr(model, "classes_") else ["Home Team Win", "Draw", "Away Team Win"]
                st.markdown("### üìà Model Confidence:")
                fig_conf = px.bar(
                    x=labels,
                    y=conf_probs * 100,
                    labels={"x": "Outcome", "y": "Confidence (%)"},
                    title="Model Confidence via predict_proba",
                    color=labels,
                    color_discrete_map={
                        "Home Team Win": "green",
                        "Draw": "orange",
                        "Away Team Win": "red"
                    }
                )
                st.plotly_chart(fig_conf)

            # üìä Historical probabilities
            st.markdown("### üß† Historical Probabilities:")
            for k, v in probs.items():
                st.markdown(f"**{k}**: {v:.2f}%")

            fig_hist = px.bar(
                x=list(probs.keys()),
                y=list(probs.values()),
                labels={'x': 'Outcome', 'y': 'Probability (%)'},
                title="Historical Match Outcome Probabilities",
                color=list(probs.keys()),
                color_discrete_map={
                    "Home Team Win": "green",
                    "Draw": "yellow",
                    "Away Team Win": "red",
                }
            )
            st.plotly_chart(fig_hist)

            # üìâ Head-to-head result trend
            if not h2h_df.empty:
                st.markdown("### ü§ù Head-to-Head Match History:")
                h2h_clean = h2h_df[["Date", "HomeTeam", "AwayTeam", "FTR"]] if "FTR" in h2h_df else h2h_df[["Date", "Home", "Away", "Res"]]
                st.dataframe(h2h_clean.sort_values("Date", ascending=False))

                result_col = "FTR" if "FTR" in h2h_df else "Res"
                h2h_plot = h2h_df.copy()
                h2h_plot["Match"] = h2h_plot["Date"]
                h2h_plot["Result"] = h2h_plot[result_col].map({"H": "Home Team Win", "D": "Draw", "A": "Away Team Win"})

                fig_h2h = px.line(
                    h2h_plot.sort_values("Date"),
                    x="Date", y=[result_col],
                    markers=True,
                    title="Result Timeline (H2H)"
                )
                fig_h2h.update_traces(line_color='blue')
                st.plotly_chart(fig_h2h)


