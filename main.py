# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rdepxh4wtVMwXqF3UFV7KCgDPFibqWpk
"""

#!pip install streamlit

# main.py

import streamlit as st
import plotly.express as px
from backend import (
    download_models, load_data,
    compute_mean_for_teams_v1, compute_mean_for_teams_v2,
    calculate_probabilities_v1, calculate_probabilities_v2,
    determine_final_prediction
)
from leagues import leagues
st.set_page_config(page_title="Football Predictor", layout="centered")
# Load models and data
model1, model2 = download_models()
data1, data2 = load_data()

# Inline CSS (or load external file)
with open("style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

st.markdown('<div class="title">FOOTBALL PREDICTION APP</div>', unsafe_allow_html=True)

category = st.selectbox("Select Category", list(leagues.keys()))
league = st.selectbox("Select a League", list(leagues[category].keys()))
teams = leagues[category][league]
home_team = st.selectbox("Select Home Team", teams)
away_team = st.selectbox("Select Away Team", teams)

if st.button("Predict Match Outcome"):
    if category == "Others":
        input_data = compute_mean_for_teams_v2(home_team, away_team, data2, model2)
        probs = calculate_probabilities_v2(home_team, away_team, data2)
        if input_data is None or probs is None:
            st.warning("No historical data available.")
        else:
            pred = model2.predict(input_data)[0]
            final = determine_final_prediction(pred, probs)
    else:
        input_data = compute_mean_for_teams_v1(home_team, away_team, data1, model1)
        probs = calculate_probabilities_v1(home_team, away_team, data1)
        if input_data is None or probs is None:
            st.warning("No historical data available.")
        else:
            pred = model1.predict(input_data)[0]
            final = determine_final_prediction(pred, probs)

    if input_data is not None and probs is not None:
        st.markdown(f'<div class="prediction-result">üèÜ Final Prediction: {final}</div>', unsafe_allow_html=True)
        colors = {
            "Home Team Win": "green",
            "Draw": "yellow",
            "Away Team Win": "red",
        }
        fig = px.bar(
            x=list(probs.keys()),
            y=list(probs.values()),
            labels={'x': 'Outcome', 'y': 'Probability (%)'},
            title="Match Outcome Probabilities",
            color=list(probs.keys()),
            color_discrete_map=colors
        )
        st.plotly_chart(fig)
        st.markdown("### Historical Probabilities:")
        for k, v in probs.items():
            st.markdown(f"**{k}**: {v:.2f}%")
